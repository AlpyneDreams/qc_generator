
import os
import bpy
from bpy.props import *

from . import QC_Properties


def write_qc_file(props):
    qc_path = os.path.splitext(os.path.basename(bpy.data.filepath))[0] + ".qc"
    qc_path = os.path.join(os.path.dirname(bpy.data.filepath), qc_path)
    f = open(qc_path, 'w', encoding='utf8')

    print("Writing QC: {}".format(qc_path))
    def writef(args): print(args, file=f)

    writef("// Auto-generated by Blender QC File Generator")

    anots = QC_Properties.__annotations__
    for key in anots:
        if hasattr(props, key):
            value = getattr(props, key)
            value_type = anots[key][0]
            anot = anots[key][1]

            if 'options' in anot and 'HIDDEN' in anot['options']:
                print("IGNORED: " + key)
                continue

            # skip collections for now
            if value_type == CollectionProperty:
                continue

            # skip default values
            if 'default' in anot and value == anot['default']:
                print("SKIPPING: " + key)
                continue
            
            if type(value) == bool and value == True: # bools to flags
                writef("$%s" % key)
                continue
            
            if type(value) == str and value == '':  # discard empty strings
                continue
            
            writef("$%s %s" % (key, value))

    for body in props.bodies:
        if body.component_type in {'body', 'model', 'sequence'}:
            writef('${b.component_type} "{b.name}" "{b.path}"'.format(b=body))
        elif body.component_type == 'collisionmodel':
            writef('${b.component_type} "{b.path}"'.format(b=body))
    
    f.close()

    return
